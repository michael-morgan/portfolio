{"version":3,"sources":["server.es6"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["import * as express from \"express\";\nimport * as path from \"path\";\nimport * as bodyParser from \"body-parser\";\nimport * as mongodb from \"mongodb\";\n\nlet ObjectID = mongodb.ObjectID;\nlet CONTACTS_COLLECTION = \"contacts\";\n\nlet app = express();\napp.use(express.static(__dirname + \"/public\"));\napp.use(bodyParser.json());\n\n// Create a database variable outside of the database connection callback to reuse the connection pool in your app.\nlet db;\n\n// Connect to the database before starting the application server. \nmongodb.MongoClient.connect(process.env.MONGODB_URI, (err, database) => {\n\tif (err) {\n\t\tconsole.log(err);\n\t\tprocess.exit(1);\n\t}\n\n\t// Save database object from the callback for reuse.\n\tdb = database;\n\tconsole.log(\"Database connection ready\");\n\n\t// Initialize the app.\n\tvar server = app.listen(process.env.PORT || 8080, () => {\n\t\tvar port = server.address().port;\n\t\tconsole.log(\"App now running on port\", port);\n\t});\n});\n\n// CONTACTS API ROUTES BELOW\n\n// Generic error handler used by all endpoints.\nfunction handleError(res, reason, message, code) {\n\tconsole.log(\"ERROR: \" + reason);\n\tres.status(code || 500).json({\"error\": message});\n}\n\n/*  \"/contacts\"\n *    GET: finds all contacts\n *    POST: creates a new contact\n */\n\napp.get(\"/contacts\", function (req, res) {\n\tdb.collection(CONTACTS_COLLECTION).find({}).toArray((err, docs) => {\n\t\tif (err) {\n\t\t\thandleError(res, err.message, \"Failed to get contacts.\");\n\t\t} else {\n\t\t\tres.status(200).json(docs);\n\t\t}\n\t});\n});\n\napp.post(\"/contacts\", (req, res) => {\n\tvar newContact = req.body;\n\tnewContact.createDate = new Date();\n\n\tif (!(req.body.firstName || req.body.lastName)) {\n\t\thandleError(res, \"Invalid user input\", \"Must provide a first or last name.\", 400);\n\t}\n\n\tdb.collection(CONTACTS_COLLECTION).insertOne(newContact, (err, doc) => {\n\t\tif (err) {\n\t\t\thandleError(res, err.message, \"Failed to create new contact.\");\n\t\t} else {\n\t\t\tres.status(201).json(doc.ops[0]);\n\t\t}\n\t});\n});\n\n/*  \"/contacts/:id\"\n *    GET: find contact by id\n *    PUT: update contact by id\n *    DELETE: deletes contact by id\n */\n\napp.get(\"/contacts/:id\", (req, res) => {\n\tdb.collection(CONTACTS_COLLECTION).findOne({_id: new ObjectID(req.params.id)}, (err, doc) => {\n\t\tif (err) {\n\t\t\thandleError(res, err.message, \"Failed to get contact\");\n\t\t} else {\n\t\t\tres.status(200).json(doc);\n\t\t}\n\t});\n});\n\napp.put(\"/contacts/:id\", (req, res) => {\n\tvar updateDoc = req.body;\n\tdelete updateDoc._id;\n\n\tdb.collection(CONTACTS_COLLECTION).updateOne({_id: new ObjectID(req.params.id)}, updateDoc, (err, doc) => {\n\t\tif (err) {\n\t\t\thandleError(res, err.message, \"Failed to update contact\");\n\t\t} else {\n\t\t\tres.status(204).end();\n\t\t}\n\t});\n});\n\napp.delete(\"/contacts/:id\", (req, res) => {\n\tdb.collection(CONTACTS_COLLECTION).deleteOne({_id: new ObjectID(req.params.id)}, (err, result) => {\n\t\tif (err) {\n\t\t\thandleError(res, err.message, \"Failed to delete contact\");\n\t\t} else {\n\t\t\tres.status(204).end();\n\t\t}\n\t});\n});"]}